name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Swift Package Manager Tests
  spm-tests:
    name: Swift Package Manager Tests
    runs-on: macos-latest
    
    strategy:
      matrix:
        xcode: ['15.0']
        platform: ['iOS', 'macOS', 'watchOS', 'tvOS']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode
      run: sudo xcode-select -switch /Applications/Xcode_${{ matrix.xcode }}.app
      
    - name: Build and Test
      run: |
        swift build
        swift test
        
    - name: Run Platform Tests
      run: |
        xcodebuild test \
          -scheme SwiftUI-Design-System-Pro \
          -destination 'platform=${{ matrix.platform }} Simulator,name=iPhone 15' \
          -enableCodeCoverage YES \
          | xcpretty

  # Xcode Build Tests
  xcode-build:
    name: Xcode Build Tests
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode
      run: sudo xcode-select -switch /Applications/Xcode_15.0.app
      
    - name: Build for iOS
      run: |
        xcodebuild build \
          -scheme SwiftUI-Design-System-Pro \
          -destination 'platform=iOS Simulator,name=iPhone 15' \
          | xcpretty
          
    - name: Build for macOS
      run: |
        xcodebuild build \
          -scheme SwiftUI-Design-System-Pro \
          -destination 'platform=macOS' \
          | xcpretty
          
    - name: Build for watchOS
      run: |
        xcodebuild build \
          -scheme SwiftUI-Design-System-Pro \
          -destination 'platform=watchOS Simulator,name=Apple Watch Series 9' \
          | xcpretty
          
    - name: Build for tvOS
      run: |
        xcodebuild build \
          -scheme SwiftUI-Design-System-Pro \
          -destination 'platform=tvOS Simulator,name=Apple TV' \
          | xcpretty

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode
      run: sudo xcode-select -switch /Applications/Xcode_15.0.app
      
    - name: Run Unit Tests
      run: |
        xcodebuild test \
          -scheme SwiftUI-Design-System-Pro \
          -destination 'platform=iOS Simulator,name=iPhone 15' \
          -only-testing:DesignSystemProTests \
          -enableCodeCoverage YES \
          | xcpretty
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # UI Tests
  ui-tests:
    name: UI Tests
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode
      run: sudo xcode-select -switch /Applications/Xcode_15.0.app
      
    - name: Run UI Tests
      run: |
        xcodebuild test \
          -scheme SwiftUI-Design-System-Pro \
          -destination 'platform=iOS Simulator,name=iPhone 15' \
          -only-testing:DesignSystemProUITests \
          | xcpretty

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode
      run: sudo xcode-select -switch /Applications/Xcode_15.0.app
      
    - name: Run Performance Tests
      run: |
        xcodebuild test \
          -scheme SwiftUI-Design-System-Pro \
          -destination 'platform=iOS Simulator,name=iPhone 15' \
          -only-testing:DesignSystemProPerformanceTests \
          | xcpretty

  # SwiftLint
  swiftlint:
    name: SwiftLint
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install SwiftLint
      run: |
        brew install swiftlint
        
    - name: Run SwiftLint
      run: |
        swiftlint lint --reporter github-actions-logging

  # Documentation Check
  documentation:
    name: Documentation Check
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check Documentation Links
      run: |
        # Check for broken links in README
        grep -r "http" README.md | while read line; do
          url=$(echo $line | grep -o 'http[^)]*')
          if curl --output /dev/null --silent --head --fail "$url"; then
            echo "‚úÖ $url is working"
          else
            echo "‚ùå $url is broken"
            exit 1
          fi
        done

  # Security Scan
  security:
    name: Security Scan
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Security Check
      run: |
        # Check for common security issues
        echo "üîç Running security checks..."
        
        # Check for hardcoded secrets
        if grep -r "password\|secret\|key\|token" Sources/ --exclude="*.md"; then
          echo "‚ö†Ô∏è  Potential hardcoded secrets found"
          exit 1
        fi
        
        # Check for unsafe force unwrapping
        if grep -r "!" Sources/ --include="*.swift" | grep -v "//"; then
          echo "‚ö†Ô∏è  Force unwrapping found"
        fi

  # Release
  release:
    name: Release
    runs-on: macos-latest
    needs: [spm-tests, xcode-build, unit-tests, ui-tests, performance-tests, swiftlint, documentation, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release for commit ${{ github.sha }}
          
          ## Changes
          - Automated build and test pipeline
          - All tests passing
          - Code quality checks passed
        draft: false
        prerelease: false
